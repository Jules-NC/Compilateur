// Options for JavaCC.
options { LOOKAHEAD=1; FORCE_LA_CHECK=true; }

// Fonction principale
PARSER_BEGIN(Jagger)
public class Jagger {
    public static void main(String args[]) throws ParseException {
        Jagger parser = new Jagger(System.in);
        parser.mainloop();
    }
}
PARSER_END(Jagger)

// Characters to ignore.
SKIP: { " " | "\r" | "\t" }

// Token specifications.
TOKEN:
{
    < NUMBER: (<DIGIT>)+ ("." (<DIGIT>)*)? >  // A decimal number.
|   < DIGIT: ["0"-"9"] >                      // A decimal digit.
|   < STRING: "\"" (~["\""])*  "\"">
|   < EOL: "\n" >                             // End of line.
}

// Main lopp: read expressions on a line until end of file.
//     mainloop â†’ (expression <EOL>)* <EOF>
void mainloop():
{ Statement a; }
{
    (
      a=statement5() <EOL> {
        TypeCheckerVisitor tcv = new TypeCheckerVisitor();
        PrettyPrintVisitor ppv = new PrettyPrintVisitor();
        EvaluateVisitor ev = new EvaluateVisitor();
        tcv.visit(a);
        ppv.visit(a);
        ev.visit(a);

        System.out.println("=====================");
        System.out.println(tcv.TYPE);
        System.out.println(ppv.STR_VALUE);
        System.out.println("---------------------");
        System.out.println(ev.INT_VALUE);

        if(ev.getType() == Type.P_Int)
            System.out.println(ev.INT_VALUE);
        else
            System.out.println(ev.STR_VALUE);
      }
    )*
    <EOF>
}



Statement statement5():
{Statement a, b, c; Expression e; Scope s = new Scope();}{
	e = expression() ";" {return new SExpression(e);}
	| "if" "(" e=expression() ")" b=statement5() "else" c=statement5() {return new IfThenElse(e, b, c);}
    | "{" ( a=statement5() {s.addStatement(a);} )* "}" {return s;}
}


Expression expression():
{ Expression a,b; }
{
    a=expression12()
    (
      "==" b=expression() { a=new Equal(a, b); }
    | "!=" b=expression() { a=new NotEqual(a, b); }
    
    )? { return a; }
}

Expression expression12():
{ Expression a,b; }
{
    a=expression13()
    (
      ">" b=expression12() { a=new Greater(a, b); }
    | "<" b=expression12() { a=new Less(a, b); }
    | ">=" b=expression12() { a=new GreaterOrEqual(a, b); }
    | "<=" b=expression12() { a=new LessOrEqual(a, b); }
    )? { return a; }
}

Expression expression13():
{ Expression a,b; }
{
    a=expression14()
    (
      ("+" b=expression14() { a=new Add(a, b); })
    | ("-" b=expression14() { a=new Sub(a, b); })
    )* { return a; }
}


Expression expression14():
{ Expression a,b; }
{
    a=expression15()
    (
      ("*" b=expression15() { a=new Mul(a, b); })
    | ("/" b=expression15() { a=new Div(a, b); })
    )* { return a; }
}

Expression expression15():
{ Expression a; }
{
    a=expression16() {return a; }
    | "-" a=expression16() { return new Negative(a); }
}

Expression expression16():
{ Expression a; }
{
    a=expression17() {return a; }
    | "print" "(" a=expression() ")" { return new Print(a); }
}

Expression expression17():
{ Token t; Expression e; }
{
    t=<STRING> {
        String str = t.toString();
        return new PString(str.substring(1, str.length()-1));
    }
    | t=<NUMBER> { return new Num(Integer.parseInt(t.toString())); }
    | "(" e=expression() ")" { return e;}
}
