// Options for JavaCC.
options { LOOKAHEAD=1; FORCE_LA_CHECK=true; }

// Fonction principale
PARSER_BEGIN(Jagger)
public class Jagger {
    public static void main(String args[]) throws ParseException {
        Jagger parser = new Jagger(System.in);
        parser.mainloop();
    }
}
PARSER_END(Jagger)

// Characters to ignore.
SKIP: { " " | "\r" | "\t" }

// Token specifications.
TOKEN:
{
    < NUMBER: (<DIGIT>)+ ("." (<DIGIT>)*)? >  // A decimal number.
|   < DIGIT: ["0"-"9"] >                      // A decimal digit.
|   < EOL: "\n" >                             // End of line.
}

// Main lopp: read expressions on a line until end of file.
//     mainloop â†’ (expression <EOL>)* <EOF>
void mainloop():
{ Statement a; }
{
    (
      a=statement5() <EOL> {
        PrettyPrintVisitor ppv = new PrettyPrintVisitor();
        EvaluateVisitor ev = new EvaluateVisitor();
        System.out.println(ppv.visit(a));
        System.out.println(ev.visit(a));
      }
    )*
    <EOF>
}


/*
Statement statement5():
{Statement a; Expression b;}{
	b=expression() ";" {return new SReturn(b);}
}
*/

Statement statement5():
{Statement a; Expression b;}{
	b=expression() ";" {return new SReturn(b);}
}


Expression expression():
{ Expression a,b; }
{
    a=expression12()
    (
      "==" b=expression() { a=new Equal(a, b); }
    | "!=" b=expression() { a=new NotEqual(a, b); }
    
    )? { return a; }
}

Expression expression12():
{ Expression a,b; }
{
    a=expression13()
    (
      ">" b=expression12() { a=new Greater(a, b); }
    | "<" b=expression12() { a=new Less(a, b); }
    | ">=" b=expression12() { a=new GreaterOrEqual(a, b); }
    | "<=" b=expression12() { a=new LessOrEqual(a, b); }
    )? { return a; }
}

Expression expression13():
{ Expression a,b; }
{
    a=expression14()
    (
      "+" b=expression13() { a=new Add(a, b); }
    | "-" b=expression13() { a=new Sub(a, b); }
    )? { return a; }
}


Expression expression14():
{ Expression a,b; }
{
    a=expression15()
    (
      "*" b=expression14() { a=new Mul(a, b); }
    | "/" b=expression14() { a=new Div(a, b); }
    )? { return a; }
}

Expression expression15():
{ Expression a; }
{
    a=expression16() {return a; }
    | "-" a=expression16() { return new Negative(a); }
}

Expression expression16():
{ Token t; Expression e; }
{
      t=<NUMBER> { return new Num(Integer.parseInt(t.toString())); }
    | "(" e=expression() ")" { return e;}
}
